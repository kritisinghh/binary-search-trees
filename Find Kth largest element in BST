/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
    /*
    void func(TreeNode *node, vector<int> &list){
        if (!node) return;
        func(node->left, list);
        list.push_back(node->val);
        func(node->right, list);
    */
    void reverseInorder(TreeNode* root, int &c, int k, int &ans){
        if (!root || c>k) return;
        reverseInorder(root->right, c, k, ans);
        c++;
        if (c==k){
            ans=root->val;
            return;
        }
        inorder(root->left, c, k, ans);
    }
public:
    int kthSmallest(TreeNode* root, int k) {
        /*
        vector<int> list;
        func(root, list);
        sort(list.begin(), list.end());
        return list[list.size()-k];
        */
        int ans = INT_MIN;
        int c = 0;
        reverseInorder(root, c, k, ans);
        return ans;
    }
};
