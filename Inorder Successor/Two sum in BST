/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class BSTIterator {
    stack<TreeNode*> st;
    bool reverse;
    // reverse -> true -> before
    // reverse -> false -> next
    void pushAll(TreeNode* node){
        for(;node!=nullptr;){
            st.push(node);
            if (reverse==true) node=node->right;
            else node=node->left;
        }
    }
public:
    BSTIterator(TreeNode* root, bool isReverse) {
        this->reverse=isReverse;
        pushAll(root);
    }
    
    int next() {
        TreeNode* temp=st.top();
        st.pop();
        if (!reverse) pushAll(temp->right);
        else pushAll(temp->left);
        return temp->val;
    }
    
    bool hasNext() {
        return !st.empty();
    }
};

/**
 * Your BSTIterator object will be instantiated and called as such:
 * BSTIterator* obj = new BSTIterator(root);
 * int param_1 = obj->next();
 * bool param_2 = obj->hasNext();
 */
class Solution {
    /*
    bool dfs(TreeNode* node, int k, unordered_set<int> &seen){
        if (!node) return false;
        if (seen.count(k-node->val)) return true;
        seen.insert(node->val);
        return dfs(node->left, k, seen)||dfs(node->right, k, seen);
    }*/
public:
    bool findTarget(TreeNode* root, int k) {
        // brute force is taking inorder of the tree in vector<int> and moving left and right pointers accordingly, until we get the sum, if sum>k->right--;sum<k->left++ and check if sum==k return true or in the end return false
        /*
        unordered_set<int> seen;
        return dfs(root, k, seen);
        */
        if (!root) return false;
        BSTIterator l(root, false);
        BSTIterator r(root, true);

        int i=l.next();
        int j=r.next();
        while(i<j){
            if (i+j==k) return true;
            else if (i+j<k) i=l.next();
            else j=r.next( );
        }
        return false;
    }
};
